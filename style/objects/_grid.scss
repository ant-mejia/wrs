/**
 * Enable / Disable aligment modifiers.
 * .o-grid--right : Align columns on right horizontally
 * .o-grid--center : Align columns on center horizontally
 * .o-grid--middle : Align columns on middle vertically
 * .o-grid--bottom : Align columns on bottom vertically
 *
 * Type: Boolean
 */
$iota-objs-grid-aligned: true;
/**
 * Enable / Disable reversed modifier
 * .o-grid--rev : Reverse columns order
 *
 * Type: Boolean
 */
$iota-objs-grid-rev: false;
/**
 * Default gutter size. Use a number for a single size or
 * a map for a responsive size.
 *
 * Type: Number / Map
 */
$iota-objs-grid-gutter-default: $iota-global-gutter-default;
/**
 * Extra gutters map. Each gutter size will be available as a
 * modifier that will be named according to the gutter name.
 * Each gutter size will be available as a modifier that will
 * be named according to the gutter name.
 * E.g. If $iota-objs-grid-gutter-extra: ('compact': '10px');
 * then .o-grid--compact will be available for use.
 *
 * Type: Map
 */
$iota-objs-grid-gutter-extra: ();
/**
 * Enable / Disable flexbox on grid.
 *
 * Type: Boolean
 */
$iota-objs-grid-flex: $iota-global-flex;
/**
 * Enable / Disable equal height modifier .o-grid--equal-height.
 * Works only if $iota-obj-grid-flex is enabled.
 *
 * Type: Boolean
 */
$iota-objs-grid-equal-height: true;
/**
 * Namespace classes
 *
 * Type: String
 */
$iota-objs-grid-namespace: 'grid';
$iota-objs-grid-column-name: 'col';
$iota-objs-grid-row-name: 'row';
$iota-objs-grid-align-right-name: 'right';
$iota-objs-grid-align-center-name: 'center';
$iota-objs-grid-align-top-name: 'top';
$iota-objs-grid-var: $iota-global-objects-namespace + $iota-objs-grid-namespace;
@import '../../node_modules/iotacss/objects/grid';

.#{$iota-objs-grid-var} {
  // margin-right: -$iota-global-gutter-default;
  margin-left: 0;

  .#{$iota-objs-grid-var + $iota-global-separator + $iota-objs-grid-row-name} {
    display       : -webkit-flex;
    display       : -ms-flex;
    display       : flex;
    flex-direction: column;
    @include iota-breakpoint(sm) {
      flex-direction: row;
      flex-wrap     : nowrap;
    }

    img {
      max-width: 100%;

      &.backsplash {
        border-radius: 10px;
        box-shadow   : 0 10px 40px 0 rgba(#6eaee3, 0.16);
        position     : absolute;
        top          : 60px;
        left         : 60px;
        // opacity: 0.25;
      }
    }

    &.o-grid_row-center {
      align-items: center;
    }

    &.o-grid_row-gradient {
      &::before {
        position  : absolute;
        content   : '';
        background: linear-gradient(#fff, rgba(#e4f5ff, 0.5));
        top       : 0;
        left      : 0;
        right     : 0;
        bottom    : 0;
        @include iota-breakpoint(sm) {
          left : -50vw;
          right: -50vw;
          top  : -250px;
        };
      }
    }

    &.flush {
      width       : 100vw;
      margin-left : -$iota-global-gutter-default;
      padding-left: $iota-global-gutter-default;

      .o-grid_col {
        padding-right: 40px;
      }
      @include iota-breakpoint(sm) {
        max-width: 1000px;
        margin   : 0;
        padding  : 0;
      };
    }

    &.o-grid_row-reverse {
      flex-direction: column-reverse;
      @include iota-breakpoint(sm) {
        flex-direction: row;
      };
    }
  }

  .o-grid_row-text {
    @include iota-type(16px 28px);
    @extend .comfortaa;
  }
}
